/**
* \file sha3_test.h
* \brief <b>SHA3 Known Answer Tests</b> \n
* Uses Known Answer Tests from official sources to qsc_intutils_verify the
* correct operation of SHA3 digest and SHAKE implementations.
* \author John Underhill
* \date December 28, 2017
*/

#ifndef QSCTEST_SHA3_TEST_H
#define QSCTEST_SHA3_TEST_H

#include "common.h"

/**
* \brief Tests the 256-bit version of the keccak message digest for correct operation,
* using selected vectors from the NIST Fips202 and alternative references.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* Fips202: <a href="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf">SHA3-Standard</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-256_Msg0.pdf">SHA256(0)</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-256_1600.pdf">SHA256(1600)</a> \n
* KAT: <a href="https://www.di-mgt.com.au/sha_testvectors.html">SHA256(24, 448)</a>
*/
bool qsctest_sha3_256_kat(void);

/**
* \brief Tests the 512-bit version of the keccak message digest for correct operation,
* using selected vectors from NIST Fips202 and alternative references.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* Fips202: <a href="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf">SHA3-Standard</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-512_Msg0.pdf">SHA512(0)</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-512_1600.pdf">SHA512(1600)</a> \n
* KAT: <a href="https://www.di-mgt.com.au/sha_testvectors.html">SHA512(24, 448)</a>
*/
bool qsctest_sha3_512_kat(void);

/**
* \brief Tests the 128-bit version of the SHAKE XOF function for correct operation,
* using selected vectors from the NIST reference package.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHAKE128_Msg0.pdf">SHAKE128(0)</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHAKE128_Msg1600.pdf">SHAKE128(1600)</a>
*/
bool qsctest_shake_128_kat(void);

/**
* \brief Tests the 256-bit version of the SHAKE XOF function for correct operation,
* using selected vectors from the NIST reference package.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHAKE256_Msg0.pdf">SHAKE256(0)</a> \n
* KAT: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHAKE256_Msg1600.pdf">SHAKE256(1600)</a>
*/
bool qsctest_shake_256_kat(void);

/**
* \brief Tests the 512-bit version of the SHAKE function for correct operation,
* using the NIST vectors.
*
* \return Returns true for success
*
* \remarks <b>References:</b> \n
* KATs generated by the CEX C++ cryptographic Library: <a href="https://github.com/Steppenwolfe65/CEX">CEX</a> \n
*/
bool qsctest_shake_512_kat(void);

/**
* \brief Tests the 128-bit version of the cSHAKE function for correct operation,
* using the NIST vectors.
*
* \return Returns true for success
*
* \remarks <b>References:</b> \n
* NIST: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/cSHAKE_samples.pdf">cSHAKE example values</a> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a>
*/
bool qsctest_cshake_128_kat(void);

/**
* \brief Tests the 256-bit version of the cSHAKE function for correct operation,
* using the NIST vectors.
*
* \return Returns true for success
*
* \remarks <b>References:</b> \n
* NIST: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/cSHAKE_samples.pdf">cSHAKE example values</a> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a>
*/
bool qsctest_cshake_256_kat(void);

/**
* \brief Tests the 512-bit version of the cSHAKE function for correct operation,
* using the NIST vectors.
*
* \return Returns true for success
*
* \remarks <b>References:</b> \n
* KATs generated by the CEX C++ cryptographic Library: <a href="https://github.com/Steppenwolfe65/CEX">CEX</a> \n
*/
bool qsctest_cshake_512_kat(void);

/**
* \brief Tests the 128-bit version of the KMAC function for correct operation,
* using selected vectors from the NIST reference package.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a> \n
* NIST: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/KMAC_samples.pdf">KMAC example values</a>
*/
bool qsctest_kmac_128_kat(void);

/**
* \brief Tests the 256-bit version of the KMAC function for correct operation,
* using selected vectors from the NIST reference package.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a> \n
* NIST: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/KMAC_samples.pdf">KMAC example values</a>
*/
bool qsctest_kmac_256_kat(void);

/**
* \brief Tests the 512-bit version of the KMAC function for correct operation,
* using selected vectors from the NIST reference package.
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* KATs generated by the CEX C++ cryptographic Library: <a href="https://github.com/Steppenwolfe65/CEX">CEX</a> \n
*/
bool qsctest_kmac_512_kat(void);

/**
* \brief Tests the 256-bit version of the Keccak-based Parallel Authentication MAC (KPA) function for correct operation,
* using original vectors.
*
* \return Returns true for success
*/
bool qsctest_kpa_256_kat(void);

/**
* \brief Tests the 512-bit version of the Keccak-based Parallel Authentication MAC (KPA) function for correct operation,
* using original vectors.
*
* \return Returns true for success
*/
bool qsctest_kpa_512_kat(void);

#if defined(QSC_SYSTEM_HAS_AVX2)
/**
* \brief Tests the KMAC-128 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac128x4_equality(void);

/**
* \brief Tests the KMAC-256 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac256x4_equality(void);

/**
* \brief Tests the KMAC-512 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac512x4_equality(void);

/**
* \brief Tests the SHAKE-128 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake128x4_equality(void);

/**
* \brief Tests the SHAKE-256 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake256x4_equality(void);

/**
* \brief Tests the SHAKE-512 AVX2 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake512x4_equality(void);
#endif

#if defined(QSC_SYSTEM_HAS_AVX512)
/**
* \brief Tests the KMAC-128 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac128x8_equality(void);

/**
* \brief Tests the KMAC-256 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac256x8_equality(void);

/**
* \brief Tests the KMAC-512 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_kmac512x8_equality(void);

/**
* \brief Tests the SHAKE-128 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake128x8_equality(void);

/**
* \brief Tests the SHAKE-256 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake256x8_equality(void);

/**
* \brief Tests the SHAKE-512 AVX512 intrinsics implementation for equality with the sequential implementation.
*
* \return Returns true for success
*/
bool qsctest_shake512x8_equality(void);
#endif

/**
* \brief Run all tests.
*/
void qsctest_sha3_run(void);

#endif
